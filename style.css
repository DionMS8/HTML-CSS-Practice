/* CSS USES SELECTORS AND DECLARATION BLOCKS */

/* NOTE: COLOURS CAN BE SPECIFIED USING PREDEFINED COLOUR NAMES or RGB, HEX, 
HSL, RGBA, HSLA values. */

/* STYLING ALL ELEMENTS WITHIN THE HTML BODY */
body {
    background-image: url("https://barbarashdwallpapers.com/wp-content/uploads/2015/05/White-wave-pattern-wallpaper-1.jpg");
    background-repeat: repeat-x-y;
    font-family: Georgia, 'Times New Roman', Times, serif;
}

/* UNDERSTANDING THE BOX-MODEL */
div.box-model {
    height: 100px;
    width: 100px;
    padding: 20px;
    margin: 100px;
    border: 10px solid blueviolet;
    background-color: greenyellow; 
}

/* FORMATTING TEXT AND FONT */
h2.text {
    color: green;
    text-align: center;
    text-decoration: underline;
    text-shadow: 2px 2px 5px greenyellow;
    text-transform: uppercase;
    font-size: medium;
    font-weight: 400;
    line-height: 1.75;
}

/* OPACITY WITH HOVER EFFECT */
.trunks {
    opacity: 0.5;
    border: 3px solid black;
}

.trunks:hover {
    filter:invert();
}

.goku {
    opacity: 0.5;
    border: 3px solid black;
}

.goku:hover {
    opacity: 1;
}


/*FORMATTING TABLES */
table, tr {
    border: 3px solid black;
    width: 100%; /* THIS MAKES THE TABLE RESPONSIVE SO THAT THE TABLE WIDTH WILL ADJUST ACCPORDING TO THE WIDTH OF THE WINDOW */
    background-color: gold;
}

td {
    border: 3px solid black;
    width: 100%; /* THIS MAKES THE TABLE RESPONSIVE SO THAT THE TABLE WIDTH WILL ADJUST ACCPORDING TO THE WIDTH OF THE WINDOW */
    background-color: goldenrod;
}

/* FORMATTING LINKS IN <a> TAGS BASED ON DIFFERENT STATES*/
a:link {
    color: blue;
}

a:visited {
    color: grey;
}

a:hover {
    color: gold;
}

a:active {
    color: red;
}

div.youtubelink {
    background: skyblue;
    width: 160px;
 }

 div.youtubelink :hover {
     background-color: blue;
 }


/* CSS POSITIONING */

/* STATIC - THIS IS THE DEFAULT POSITION OF AN ELEMENT */
div.static {
    position: static;
    width: 200px;
    height: 200px;
    background-color: lime;
    border: 3px solid black;
    text-align: center;
}

/* THE ELEMENT CAN BE POSITIONED USING TOP, BOTTOM, RIGHT AND LEFT */
div.relative {
    position: relative;
    top: 40px;
    left: 350px;
    width: 200px;
    height: 200px;
    background-color: red;
    border: 3px solid black;
    text-align: center;
}

/* */
div.fixed {
    position: fixed;
    right: 0px;
    bottom: 0px;
    width: 200px;
    height: 200px;
    background-color: fuchsia;
    border: 3px solid black;
    text-align: center;
    z-index: -1; /* SPECIFIES THE STACK ORDER OF THE ELEMENT */
}

/* THE Z-INDEX PROPERTY SPECIFIES THE STACK ORDER OF THE ELEMENT */

div.absolute {
    position: absolute;
    top: 50px;
    right: 0;
    width: 200px;
    height: 200px;
    background-color: aquamarine;
    border: 3px solid black;
    text-align: center;
}

div.sticky {
    position: sticky;
    top: 80px;
    right: 0px;
    width: 200px;
    height: 200px;
    background-color: seagreen;
    border: 3px solid black;
    text-align: center;
}

  
/* STYLING A FORM */
div.form {
    background: rgb(210, 247, 2);
    border: 10px solid transparent;
    border-image: url(https://www.lsprints.co.uk/ekmps/shops/lsprints/images/stock-designs-zebra-print-pattern-black-yellow-42299-p.jpg) 30 round;
    border-image-slice: 2%;
    width: 200px;
    height: 300px;
    padding: 50px;
    margin-left: 200px;
}

input[type=text] {
    width: 180px;
    display:inline-block;
    box-sizing: border-box;
    border: 3px solid black;
}

input[type=text]:hover {
    box-shadow: 2px 2px 5px grey;
}

input[type=email] {
    width: 180px;
    display:inline-block;
    box-sizing: border-box;
    border: 3px solid black;
}

input[type=email]:hover {
    box-shadow: 2px 2px 5px grey;
}

input[type=submit] {
    width: 100px;
    display:inline-block;
    box-sizing: border-box;
    border: 3px solid black;
    background: blue;
    color: yellow;
}

/* STYLING A DROPDOWN BOX */
div.dropdown {
    min-width: 180px;
    position: relative;
    display: inline-block;
}

.dropdown-content {
    min-width: 180px;
    color:black;
    border: 3px solid black;
    position: absolute;
    background-color: white;
  }

/* STYLING A PSEUODO ELEMENT */
p::first-line {
    color: green;
}

/* IMAGE SPRITES - THIS IS A COLLECTION OF IMAGES PUT IN A SINGLE IMAGE */
/* TRADITIONAL ALTERNATIVE TO SVG IMAGES */

/* CALLING ON ANCHOR TAG ELEMENTS BASED ON TARGET ATTRIBUTES */
a[target] {
    background: yellow;
}


/* GRADIENTS */

div.grad-tb {
    height: 100px;
    border: 5px solid black;
    border-radius: 15px;
    background-color: red;
    background-image: linear-gradient(rgb(184, 12, 12), rgb(151, 47, 151));
}


p#grad-text {
    background-image: linear-gradient(45deg, yellow, blue);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-size: 40px;
    font-weight: 500;
    font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    padding-left: 20px;
}

div#grad {
    height: 70px;
    width: 1050px;
    background-color: black;
}


/*===================================================================================================================================================

/* COMBINATORS - DEFINE THE RELATIONSHIP BETWEEN SIMPLE SELECTORS */

/* THERE ARE 4 DIFFERENT CSS COMBINATORS: */

/* 1. descendant selector (space)   */
/* 2. child selector (>)            */
/* 3. adjacent sibling selector (+) */
/* 4. general sibling selector (~)  */

/*===================================================================================================================================================

/* MARGINS - THE TRANSPARENT SPACING AROUND AN ELEMENT'S BORDER

    All margin properties can have the following values:

    length - specifies a margin in px, pt, cm
    % - specifies a margin in % of the width of the containing element
    inherit - specifies that the margin should be inherited from the parent element */

    /* margin-top: ;    */
    /* margin-right: ;  */
    /* margin-bottom: ; */
    /* margin-left: ;   */

    div.center {
        margin: auto;  /* the browser calculates the Margins */
        padding: 10px;
        width: 250px;
        height: 250px;
        border: 10px solid blue;
        background: peru;
    }

    div.center p {
        font-size: large;
        color: white;
        text-align: center;
    }

    #div-0 { margin: 20px; }
    #div-1 { margin-top: 20px; }
    #div-2 { margin-right: 20px; }
    #div-3 { margin-bottom: 20px; }
    #div-4 { margin-left: 20px; }

    div.container {
    display: inline-block;
    margin: 10px;
    background-color: grey;
    }

    div.child {
    display: inline-block;
    text-align: center;    
    padding: 20px;
    background-color: red;
    border-radius: 10px;
    color: whitesmoke;
    font-family: 'Avenir';
    font-weight: bold;
    }

/*===========================================================================================================================================*/

/* PADDING - THE SPACE BETWEEN AN ELEMENT'S BORDER AND IT'S CONTENT

    /* padding-top 
    /* padding-right 
    /* padding-bottom 
    /* padding-left 

/*===========================================================================================================================================*/

/* DISPLAY PROPERTIES FOR HTML ELEMENTS

    /* display: block; - THE ELEMENT CAN ACCEPT BOX-MODEL PROPERTIES 
    /* display: inline; - PLACES AN ELEMENT IN LINE WITH OTHER ELEMENTS (HORIZONTALLY)
    /* display: inline-block; - BOTH BLOCK AND IN-LINE PROPERTIES
    /* display: none; - THIS WILL COMPLETELY HIDE AN ELEMENT
    /* display: flex;
    /* display: static;

/*===========================================================================================================================================*/


/*===========================================================================================================================================*/

/* BORDERS */

/*  The CSS border properties allow you to specify the style, width and color of an elements border. */

    /* dotted - Defines a dotted border */
    /* dashed - Defines a dashed border */
    /* solid - Defines a solid border */
    /* double - Defines a double border */
    /* groove - Defines a 3D grooved border.  The effect depends on the border-color value */
    /* ridge - Defines a 3D ridged border.  The effect depends on the border-color value */
    /* inset - Defines a 3D inset border.  The effect depends on the border-color value */
    /* outset - Defines a 3D outset border.  The effect depends on the border-color value */
    /* none - Defines no border */
    /* hidden - Defines a hidden border */


/*===========================================================================================================================================*/

/* BACKGROUNDS */

/* background-color – sets the background color
/* background-image – links to an image and displays it in the background
/* background-repeat – for HTML elements larger than the background, it determines which way to tile repeat the image
/* background-position – sets the background position

/*===========================================================================================================================================*/

/* OUTLINE - THIS IS A LINE THAT IS DRAWN AROUND AN ELEMENT, OUTSIDE OF THE BORDER
/* - THE OUTLINE EXISTS BETWEEN THE BORDER AND THE MARGIN



/*===========================================================================================================================================*/

/* FLOATS */

/* FLOATS ARE BOXES THAT CAN BE PULLED TO THE LEFT AND RIGHT */
/* THE CONTENT FOLLOWING IT WILL FLOW ALONG IT'S SIDE */

/* THE FLOAT PROPERTY SPECIFIES HOW AN ELEMENT SHOULD FLOAT */


/* The CSS clear property specifies what elements can float beside the cleared element and on which side. */


/*===========================================================================================================================================*/

/* CSS MEDIA QUERIES - USED FOR MOBILE RESPONSIVENESS */

/* A MEDIA QUERY MUST ALWAYS BE WRITTEN AFTER THE STYLING IT IS TRYING */
/* TO OVERWRITE */

/* MOBILE FIRST [INCREASING SCREEN WIDTH] */
@media (min-width: 600px) {
    
}

/* DESKTOP FIRST [DECREASING SCREEN WIDTH] */
@media (max-width: 600px) {
    
}

/* CREATING A MEDIA QUERY */

@media (min-width: 600px) {
    p {
        font-size: 1.25 rem;
    }
}

/* WHEN THE SCREEN WIDTH IS INCREASED BEYOND 600PX, THE FONT-SIZE WILL */
/* WILL BECOME 1.25 REM */

@media (min-width: 800px) {
    p {
        font-size: 1.5 rem;
        line-height: 1.5;
    }
}

/* WHEN THE SCREEN WIDTH IS INCREASED BEYOND 800PX, THE FONT-SIZE WILL */
/* WILL BECOME 1.5 REM AND LINE HEIGHT WILL BECOME 1.5 */

/* OTHER RULES THAN CAN BE MODIFIED WITHIN BRACKETS IN MEDIA QUERIES */
/* ORIENTATION: PORTRAIT [HEIGHT > WIDTH] */
/* ORIENTATION: LANDSCAPE [WIDTH > HEIGHT] */

/* "@media all and ()" is the same as "@media ()" */

/* THE "and" KEYWORD IS USED TO CONCATENATE */
/* A COMMA CAN BE PLACED BETWEEN RULES TO INDICATE AN "OR" CONDITION */

@media (orientation: landscape), (max-width: 500px) {
}

@media screen and () {
}

@media speech and () {
}

@media print and () {
}

/*===========================================================================================================================================*/

/* CSS GRID */


/*===========================================================================================================================================*/

/* SPECIFICITY */

/* EVERY SELECTOR HAS A POSITION IN THE HIERARCHY OF SPECIFICITY */

/*===========================================================================================================================================*/

/* !IMPORTANT RULE */

/* IF THE !IMPORTANT RULE IS APPLIED TO A SPECIFIC PROPERTY OF AN */
/* ELEMENT, ALL PREVIOUS STYLING WILL BE OVERWITTEN FOR THAT PROPERTY OF */
/* OF THAT ELEMENT */

p.important {
    background: grey;
    background: lime!important;
    color: blue;
    color: red!important;
}

/* THE ABOVE PARAGRAPH WILL HAVE RED TEXT ON A LIME BACKGROUND */ 


/*===========================================================================================================================================*/

/* ADDITIONAL NOTES: */

/* - COUNTERS ARE VARIABLES CONTROLLED AND INCREMENTED BY CSS RULES */
/* - Z-PROPERTY SPECIFIES THE STACK ORDER OF AN ELEMENT */


/*===========================================================================================================================================*/


